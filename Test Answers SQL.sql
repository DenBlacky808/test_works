--UTILITY
--Drop table rpm_future_retail PURGE;
--Drop table rpm_zone_location PURGE;
--Drop table rpm_zone_future_retail PURGE;
--
-- 
--alter table rpm_zone_future_retail drop constraint Zones_pk1;
--alter table rpm_future_retail drop constraint loc_fk1;
--
--alter table rpm_zone_location drop constraint Zones_pk2;
--alter table rpm_zone_location drop constraint Zones_fk;
--
--
--TRUNCATE TABLE  
--
--ALTER TABLE rpm_future_retail RENAME COLUMN SELLING_UOM to SELLING_UOM_l;
--
--purge recyclebin;
--select * from user_objects
--CREATE USER C##dynamica IDENTIFIED BY 1111;
--GRANT CONNECT, RESOURCE, DBA TO C##dynamica ;

-- Preparings
-- Changing PK
-- Added FK
-- Added unique_id's
-----------------------------------
-- Creating rpm_future_retail
-----------------------------------
create table rpm_future_retail (
       unique_id_l                NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
       FUTURE_RETAIL_ID         number(20) ,
       item_l                     varchar2(20),
       location_l                 number(5),
       action_date_l              date,
       L_SELLING_RETAIL           number(10,4),
       SELLING_RETAIL_CURRENCY_l  varchar2(3),
       SELLING_UOM_l              varchar2(2)
       );    
-----------------------------------
-- Creating rpm_zone_location:
-----------------------------------
create table rpm_zone_location (zone_id  number(2),
                                location number(4),
                                unique_id2  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY
                                );

-----------------------------------
-- Creating rpm_zone_future_retail
-----------------------------------
create table rpm_zone_future_retail (
       unique_id               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
       ZONE_FUTURE_RETAIL_ID   number(20),
       item                    varchar2(20),
       ZONE                    number(2),
       action_date             date,
       SELLING_RETAIL          number(10,4),
       SELLING_RETAIL_CURRENCY varchar2(3),
       SELLING_UOM             varchar2(2)
       );
-----------------------------------
--  Connections
ALTER TABLE rpm_zone_future_retail
ADD CONSTRAINT Zones_pk1 PRIMARY KEY (unique_id);

ALTER TABLE rpm_zone_location
ADD CONSTRAINT Zones_pk2 PRIMARY KEY (Location);

ALTER TABLE rpm_zone_location  
ADD CONSTRAINT Zones_fk
FOREIGN KEY (unique_id2)
REFERENCES rpm_zone_future_retail(unique_id); 

ALTER TABLE rpm_future_retail  
ADD CONSTRAINT loc_fk1
FOREIGN KEY (Location_l)
REFERENCES rpm_zone_location(Location); 
 

-- Tasks
/*1. Find duplicate records in RPM_FUTURE_RETAIL. The record is a duplicate
if there already such item/location/action_date combination exists (prices can differ):
a. Write a query to return all duplicated records. 
b. Delete duplicate records, so that item/location/action_date will be unique.*/

-- a
-- Solution 1
SELECT 
    item_l, 
    location_l, 
    action_date_l, 
    MAX(unique_id_l) AS unique_id_l
        FROM RPM_FUTURE_RETAIL
            GROUP BY  item_l, location_l, action_date_l
            HAVING COUNT(*) > 1; --Here solution is working.

-- Solution 2
SELECT 
    item_l, 
    location_l, 
    action_date_l, 
    unique_id_l 
        FROM(
            SELECT 
                item_l, 
                location_l, 
                action_date_l, 
                MAX(unique_id_l) as unique_id_l, LISTAGG(item_l || ':' || location_l || ':' || action_date_l, ',') 
                WITHIN GROUP (order by item_l, location_l, action_date_l) as dubls
            FROM RPM_FUTURE_RETAIL 
            GROUP BY  item_l, location_l, action_date_l)
        WHERE LENGTH(dubls) > 26
    ;

-- b
-- Solution 1
DELETE 
    FROM RPM_FUTURE_RETAIL 
        WHERE unique_id_l IN(
            SELECT MAX(unique_id_l) AS unique_id_l
                FROM RPM_FUTURE_RETAIL
                    GROUP BY  item_l, location_l, action_date_l
                    HAVING COUNT(*) > 1);

-- Solution 2
DELETE 
    FROM RPM_FUTURE_RETAIL 
        WHERE unique_id_l IN (
            SELECT unique_id_l 
                FROM(
                    SELECT 
                        item_l, 
                        location_l, 
                        action_date_l, 
                        MAX(unique_id_l) as unique_id_l, LISTAGG(item_l || ':' || location_l || ':' || action_date_l, ',') 
                        WITHIN GROUP (order by item_l, location_l, action_date_l) as dubls
                FROM RPM_FUTURE_RETAIL 
            GROUP BY  item_l, location_l, action_date_l)
            WHERE LENGTH(dubls) > 26);


/*2  Write a query to find all item/zone combinations 
in rpm_zone_future_retail for which there are no pricing data exists at
the location level (rpm_future_retail). Note that locations linked to
each zone can be obtained from rpm_zone_location table 
(e.g.: zone: 1 = locations: 2302, 3040, â€¦ etc).*/


--
--first try - not working.
--SELECT 
--    
--    item, 
--    zone, 
--    zone_future_retail_id, 
--    action_date, 
--    selling_retail, 
--    selling_retail_currency, 
--    selling_uom
--    
--   ,MAX(unique_id) as uni_id
--        FROM rpm_zone_future_retail
--            WHERE unique_id in (
--                SELECT 
--                    unique_id2
--                   FROM rpm_future_retail
--                       LEFT JOIN rpm_zone_location on rpm_future_retail.location_l = rpm_zone_location.location
--                            WHERE l_selling_retail IS NULL) 
--GROUP BY 
--    item, 
--    zone
--HAVING COUNT(*) > 1
--;
--second try - works!
SELECT 
    zone_future_retail_id,
    item, 
    zone, 
    action_date, 
    selling_retail, 
    selling_retail_currency, 
    selling_uom
        FROM rpm_zone_future_retail
             WHERE 
                    unique_id IN  
                    (
                    SELECT
                        max(unique_id) unique_id
                            FROM rpm_zone_future_retail
                            GROUP BY 
                                item, 
                                zone
                            HAVING COUNT(*) > 1
                    ) 
                    AND
                    zone IN
                        (
                        SELECT
                            zone_id
                        FROM rpm_zone_location
                            WHERE location IN
                            (
                            SELECT
                                location_l
                                FROM rpm_future_retail
                                WHERE l_selling_retail IS NULL
                            ));   

/*3  Write a query that will return current 
and previous selling retail prices (preceding action_date) 
for each item/location combination and the difference between 
current and previous prices. */

--first try - not working.    
--SELECT 
--    item_l, 
--    location_l, 
--    action_date_l, 
--    l_selling_retail,
--    LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L) AS selling_retail_prev,
--    CASE 
--     WHEN LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L)  
--     IS NOT NULL THEN l_selling_retail - (LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L))
--     ELSE NULL
--    END as difference
----    ,MAX(unique_id) AS uni_id
--        FROM rpm_future_retail
--             JOIN(
--                    SELECT 
--                          unique_id,  
--                          location, 
--                          selling_retail
--                      FROM rpm_zone_future_retail
--                           LEFT JOIN 
--                            rpm_zone_location on rpm_zone_future_retail.unique_id = rpm_zone_location.unique_id2              
--                        ) dgoin on  rpm_future_retail.location_l = dgoin.location 
--GROUP BY item_l, location_l
--HAVING COUNT(*) > 1 -- Same story.
; 
--second try - works!
SELECT 
    item_l AS item, 
    location_l AS location, 
    action_date_l AS action_date, 
    l_selling_retail AS selling_retail, 
    LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L) AS selling_retail_prev,
    CASE 
         WHEN LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L)  
         IS NOT NULL THEN l_selling_retail - (LAG (l_selling_retail, 1) OVER (ORDER BY ACTION_DATE_L))
         ELSE NULL
    END as difference
        FROM rpm_future_retail
            WHERE location_l IN
                  (
                    SELECT
                        MAX(location_l) location
                            FROM rpm_future_retail
                                GROUP BY 
                                item_l, 
                                location_l
                                HAVING COUNT(*) > 1
                    );
/*4   Assuming that the current date in the system is today
a.      Find the price for each item at each location on the current date. 
    Since there are many prices for the same item/location combination, 
    use the selling_retail values closest to the current  date, 
    meaning latest action_date which is  <= current date).
b.      find the differences in the prices between zone 1 and 2 
    for all items on the current date. See below result set example:*/
      
-- a   

SELECT 
    item_l,
    location_l,
    l_selling_retail
    FROM rpm_future_retail 
        WHERE 
            (location_l,
            ACTION_DATE_L)
            IN
            (    
            SELECT 
                location_l,
                ACTION_DATE_L
                    FROM
                    (
                    SELECT 
                        MIN(SYSDATE - ACTION_DATE_L) as data,
                        location_l,
                        max(ACTION_DATE_L) AS ACTION_DATE_L
                            FROM rpm_future_retail
                            GROUP BY location_l
                            HAVING COUNT(*) > 1
                    )) 
GROUP BY
    item_l,
    location_l,
    l_selling_retail;
    
      
-- b 


SELECT 
    item,
    price_zone_1,
    price_zone_2,
    price_zone_2 - price_zone_1 as difference
    FROM 
       (SELECT 
            selling_retail as price_zone_1,
            item,
            action_date,
            zone
            FROM rpm_zone_future_retail
               WHERE zone = 1 and (item, action_date)
                        IN
                        (        
                        SELECT 
                            item,
                            action_date
                                FROM
                                (
                                SELECT
                                    item,
                                    action_date,
                                    zone
                                    FROM rpm_zone_future_retail
                                        WHERE
                                            (item,
                                            action_date)
                                            IN
                                            (
                                            SELECT 
                                                item,
                                                ACTION_DATE
                                                FROM
                                                (
                                                   SELECT     
                                                        MIN(SYSDATE - ACTION_DATE) as data,
                                                        item,
                                                        MAX(ACTION_DATE) AS ACTION_DATE
                                                            FROM rpm_zone_future_retail
                                                                WHERE item IN
                                                                    (
                                                                    SELECT 
                                                                        item
                                                                        FROM rpm_zone_future_retail
                                                                    GROUP BY item
                                                                    )
                                                    GROUP BY item                
                                                    HAVING COUNT(*) > 1
                                                )
                                            )
                                     ) items     
                                             
                              ) ) zone_1                      
                    JOIN
                        (
                        SELECT 
                            selling_retail as price_zone_2,
                            item as item_2
                            FROM rpm_zone_future_retail
                               WHERE zone = 2 and (item, action_date)
                                        IN
                                        (        
                                        SELECT 
                                            item,
                                            action_date
                                                FROM 
                                                    (
                                                    SELECT
                                                        item,
                                                        action_date,
                                                        zone
                                                        FROM rpm_zone_future_retail
                                                            WHERE
                                                                (item,
                                                                action_date)
                                                                IN
                                                                (
                                                                SELECT 
                                                                    item,
                                                                    ACTION_DATE
                                                                    FROM
                                                                    (
                                                                       SELECT     
                                                                            MIN(SYSDATE - ACTION_DATE) as data,
                                                                            item,
                                                                            MAX(ACTION_DATE) AS ACTION_DATE
                                                                                FROM rpm_zone_future_retail
                                                                                    WHERE item IN
                                                                                        (
                                                                                        SELECT 
                                                                                            item
                                                                                            FROM rpm_zone_future_retail
                                                                                        GROUP BY item
                                                                                        )
                                                                        GROUP BY item                
                                                                        HAVING COUNT(*) > 1
                                                                    )
                                                                )
                                                        )
                                        ) 
                        ) zone_2 
                    ON zone_1.item = zone_2.item_2
                ;                            
    
           







